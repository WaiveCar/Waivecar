---
- name: Start and prepare a new server
  hosts: 127.0.0.1
  connection: local

  vars:
    # CT's standard settings, to be updated only in case if you need servers
    # inside client's own AWS account, or different ubuntu version
    - image: 'ami-864d84ee'            # ubuntu/trusty64
    - region: 'us-east-1'              # Northern Virginia
    - vpc_id: 'vpc-f8743e97'           # Clevertech VPC
    - vpc_subnet: 'subnet-f0743e9f'    # 10.0.0.0/24

    # Must be set:
    - pubkey: '~/.ssh/ClientName.pub'  # Path to client's public key
    - privkey: '/path/ClientName'      # Full path to private key (will go to S3)
    - instance_type: 't2.micro'        # Usually t2.micro (1GB RAM, 1 CPU)
    - client_name: 'ClientName'        # Should not contain whitespaces.
                                       #   If possible, it should be the same
                                       #   as the one in Cleverbuild
    - env: 'DEV'                       # Environment (DEV, STAG or PROD)

  tasks:
    - name: Setup EC2 keypair
      ec2_key:
        name: '{{ client_name }}'
        region: '{{ region }}'
        key_material: '{{ item }}'
        state: present
      with_file: '{{ pubkey }}'

    - name: Upload private key to S3
      s3: bucket=clever-deploy-keys
          object='{{ client_name }}.pem'
          src='{{ privkey }}' mode=put

    - name: Create security group
      local_action:
        module: ec2_group
        name: '{{ client_name }}'
        description: '{{ client_name }}'
        vpc_id: '{{ vpc_id }}'
        region: '{{ region }}'
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 10.0.0.100/32 # jenkins
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 54.208.55.94/32 # jenkins
          - proto: tcp
            from_port: 10050
            to_port: 10050
            cidr_ip: 54.148.59.73/32 # zabbix
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 199.91.168.0/22 # travis
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 199.182.120.0/22 # travis
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 173.247.96.0/19 # travis
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 54.172.141.90/32 # travis
          - proto: all
            cidr_ip: 184.106.216.206/32 # mainconn
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0

    - name: Wait a bit until new security group is ready
      pause: seconds=5

    - name: Launch instance
      local_action:
        module: ec2
        keypair: '{{ client_name }}'
        group: '{{ client_name }}'
        instance_type: '{{ instance_type }}'
        image: '{{ image }}'
        region: '{{ region }}'
        vpc_subnet_id: '{{ vpc_subnet }}'
        assign_public_ip: yes
        count: 1
        wait: yes
      register: ec2

    - name: Tag instance
      local_action: ec2_tag resource={{ item.id }} region={{ region }} state=present
      with_items: ec2.instances
      args:
        tags:
          Name: '{{ client_name }}-{{ env }}'
          Client: '{{ client_name }}'

    - name: Allocate new IP and associate with new instance
      local_action: ec2_eip instance_id={{ item.id }} region={{ region }}
      with_items: ec2.instances
      register: eip

    - name: Wait for server to boot
      local_action: wait_for host={{ item.public_ip }}
                    port=22 delay=60 timeout=320 state=started
      with_items: eip.results

    - name: Create DNS record
      route53: >
        command=create
        zone=cleverbuild.biz
        record='{{ client_name }}-{{ env }}.cleverbuild.biz'
        type=A
        value='{{ item.public_ip }}'
      with_items: eip.results

    - name: Activate termination protection
      local_action: command aws ec2 modify-instance-attribute --region {{ region }} --instance-id {{ item.id }} --attribute disableApiTermination --value true
      with_items: ec2.instances

    - name: Add new server to Zabbix security group
      local_action: command aws ec2 authorize-security-group-ingress --region us-west-2 --group-id sg-4aeec72f --protocol tcp --port 10050-10051 --cidr '{{ item.public_ip }}/32'
      with_items: eip.results
   
    - name: Add new servers to host group
      local_action: add_host name={{ item.public_ip }} groups=launched env={{ env }} client_name={{ client_name }}
      with_items: eip.results

    - name: Add hostname to /etc/hosts (vpn routes are generated from this file)
      shell: echo '{{ item.public_ip }} {{ client_name }}-{{ env }}' >> /etc/hosts
      with_items: eip.results

- name: Perform basic setup
  hosts: launched
  sudo: yes
  user: ubuntu
  roles:
    - server_prepare
    - server_upgrade
    - server_reboot
