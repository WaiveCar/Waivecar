#!/bin/bash

set -e

if [ ! -f "$1" ]; then
    echo -e "\n\033[35mManual deploy script, for cases when TravisCI is down\n\033[0m"
    echo -e "Usage: $0 $private_key"
    echo -e "Example: $0 ~/.ssh/project.pem\n"
    exit
fi

PEM="$1"
GLOBAL_NPM_MODULES=`cat .travis.yml|grep "npm install"|grep "\-g"|sed 's/-g//g'|awk '{print $4}'`
APP=`cat .travis.yml|grep "\- PACKAGE_NAME"|cut -d= -f2`
BRANCH=`git branch|sed -n '/\* /s///p'`
USER=`cat .travis.yml|grep "\- REMOTE_USER"|cut -d= -f2`
BRANCHING=`cat .travis.yml|grep "\- BRANCHING_MODEL"|cut -d= -f2`
APPROOT=`cat .travis.yml|grep "\- REMOTE_DIR_$BRANCHING"|cut -d= -f2|sed s/\$\{PACKAGE_NAME\}/$APP/g`
INIT_SCRIPT=`cat .travis.yml|grep "\- INIT_SCRIPT"|cut -d= -f2|sed s/\$\{PACKAGE_NAME\}/$APP/g`

if [ "$APPROOT" == "" ]; then
    echo "Your branching model is not supported!"
    exit 1
fi

case ${BRANCH} in
  development)
    SERVER=`cat .travis.yml |grep "\- REMOTE_HOST_DEV"|cut -d= -f2|sed s/\$\{PACKAGE_NAME\}/$APP/g`
    ;;
  staging)
    SERVER=`cat .travis.yml |grep "\- REMOTE_HOST_STAG"|cut -d= -f2|sed s/\$\{PACKAGE_NAME\}/$APP/g`
    ;;
  production)
    SERVER=`cat .travis.yml |grep "\- REMOTE_HOST_PROD"|cut -d= -f2|sed s/\$\{PACKAGE_NAME\}/$APP/g`
    ;;
  master)
    SERVER=`cat .travis.yml |grep "\- REMOTE_HOST_PROD"|cut -d= -f2|sed s/\$\{PACKAGE_NAME\}/$APP/g`
    ;;
  *)
    echo "Can't deploy from this branch! ($BRANCH)"
    exit 1
esac

echo -e "\n\033[0;32m--> Syncing code to server $SERVER: \033[0m"
rsync -avzr -e "ssh -i $PEM" \
	--exclude ".git" \
	--exclude ".vagrant" \
	--exclude "node_modules" \
	. ubuntu@$SERVER:/home/ubuntu/$APP/

echo -e "\n\033[0;32m--> Installing global npm modules: \033[0m"
for i in $GLOBAL_NPM_MODULES; do
     ssh -i $PEM ubuntu@$SERVER "sudo npm i $i -g"
done

echo -e "\n\033[0;32m--> Install npm modules: \033[0m"
ssh -i $PEM ubuntu@$SERVER \
	"cd /home/ubuntu/$APP/ && deployment/build/scripts/commit_dependencies --fast"

echo -e "\n\033[0;32m--> Build: \033[0m"
ssh -i $PEM ubuntu@$SERVER \
	"cd /home/ubuntu/$APP/ && TRAVIS_BRANCH=$BRANCH deployment/build/scripts/commit_build"

echo -e "\n\033[0;32m--> Sync app to $APPROOT: \033[0m"
ssh -i $PEM ubuntu@$SERVER \
	"sudo rsync -avr /home/ubuntu/$APP/ $APPROOT/"
ssh -i $PEM ubuntu@$SERVER \
	"sudo chown -R $USER:$USER $APPROOT"

echo -e "\n\033[0;32m--> Restarting app: \033[0m"
ssh -i $PEM ubuntu@$SERVER \
	"sudo $INIT_SCRIPT restart"

echo -e "\n\033[0;32m--> All done! \033[0m"
