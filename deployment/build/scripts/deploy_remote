#!/bin/bash
# Exit status = 0 if success, non-zero if error

# Exit at first failure
set -e
echo "`date -u `: Starting deploy_remote"

NODE_VERSION=`node -v | cut -d "v" -f 2`

# If needed, rebuild native modules
rebuild() {
    TRAVIS_NODE_VERSION_MAJOR=`echo $TRAVIS_NODE_VERSION | cut -d "." -f 1`
    TRAVIS_NODE_VERSION_MINOR=`echo $TRAVIS_NODE_VERSION | cut -d "." -f 2`
    NODE_VERSION_MAJOR=`echo $NODE_VERSION | cut -d "." -f 1`
    NODE_VERSION_MINOR=`echo $NODE_VERSION | cut -d "." -f 2`
    REBUILD=false

    echo "`date -u `: Travis node version: $TRAVIS_NODE_VERSION"
    echo "`date -u `: Target node version: $NODE_VERSION"

    if [ "$(( $NODE_VERSION_MINOR % 2))" -ne 0 ] && [ "${TRAVIS_NODE_VERSION}" != "${NODE_VERSION}" ]; then
        echo "`date -u `: Target node version is unstable and node versions differ."
        REBUILD="true"
    fi 
    if [[ "$NODE_VERSION_MAJOR" -ne "$TRAVIS_NODE_VERSION_MAJOR" ]]; then
        echo "`date -u `: Target node version major is not equal to Travis node version major"
        REBUILD="true"
    fi
    if [[ "$NODE_VERSION_MINOR" -ne "$TRAVIS_NODE_VERSION_MINOR" ]]; then
        echo "`date -u `: Target node version minor is not equal to Travis node version minor"
        REBUILD="true"
    fi 
    if [[ "$REBUILD" == "true" ]]; then
        echo "`date -u `: Rebuilding native modules"
        cd ${REMOTE_DIR}
        npm rebuild > /dev/null
        echo "`date -u `: Rebuild done"
    fi 
}

echo "Branching model: ${BRANCHING_MODEL}"

if [ "${STRICT_VERSION_CHECK}" == "true" ] && [ "${TRAVIS_NODE_VERSION}" != "${NODE_VERSION}" ]; then
    echo "STRICT_VERSION_CHECK is true and node versions do not match. Aborting"
    exit 1
fi

case ${BRANCHING_MODEL} in

NO_DEPLOY)
    echo "Not deploying"
    ;;
WEB)
    find ${REMOTE_DIR} -mindepth 1 -delete
    tar -xzf /tmp/${PACKAGE_NAME}_${TRAVIS_COMMIT}.tgz -C ${REMOTE_DIR}
    rm -f /tmp/${PACKAGE_NAME}_${TRAVIS_COMMIT}.tgz
    rebuild
    ${INIT_SCRIPT} reload || {
    	${INIT_SCRIPT} restart
	}
    ;;
API_APP)
    case ${BRANCHING_MODULE} in
        api)
            find ${REMOTE_DIR} -mindepth 1 -delete
            tar -xzf /tmp/${PACKAGE_NAME}_api_${TRAVIS_COMMIT}.tgz -C ${REMOTE_DIR}
            rm -f /tmp/${PACKAGE_NAME}_api_${TRAVIS_COMMIT}.tgz
            rebuild
		    ${INIT_SCRIPT} reload || {
		    	${INIT_SCRIPT} restart
			}
        ;;
        app)
            find ${REMOTE_DIR} -mindepth 1 -delete
            tar -xzf /tmp/${PACKAGE_NAME}_app_${TRAVIS_COMMIT}.tgz -C ${REMOTE_DIR}
            rm -f /tmp/${PACKAGE_NAME}_app_${TRAVIS_COMMIT}.tgz
        ;;
        *)
        echo "Error. Branching module ${BRANCHING_MODULE} is unknown."
        exit 1
        ;;
    esac
    ;;
*)
    echo "Error. Branching model ${BRANCHING_MODEL} is unknown."
    exit 1

esac

echo "`date -u `: deploy_remote done"
